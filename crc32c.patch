--- MTProxy/common/crc32c.c	2025-05-26 08:43:06.130562603 +0000
+++ MTProxyOriginal/common/crc32c.c	2025-05-26 09:21:41.799557623 +0000
@@ -400,10 +400,10 @@
       p += 16;
     } while (p < q);
     static const v2di K = { CRC32C_REFLECTED_X16383, CRC32C_REFLECTED_X8191 };
-    v2di D, E, F;
+    v2di D, E;
     asm volatile ("movq %1, %0\n\t" : "=x" (D)  : "g" (c));
     asm volatile ("movq %1, %0\n\t" : "=x" (E)  : "g" (c1));
-    //v2di F = __builtin_ia32_pclmulqdq128 (D, K, 0x00) ^ __builtin_ia32_pclmulqdq128 (E, K, 0x10);
+    v2di F = __builtin_ia32_pclmulqdq128 (D, K, 0x00) ^ __builtin_ia32_pclmulqdq128 (E, K, 0x10);
     asm volatile ("movq %1, %0\n\t" : "=g" (c1) : "x"(F));
     unsigned int r;
     asm volatile ("crc32l %1, %0\n\t" : "=r" (r) : "r"((int) c1), "0"(0));
@@ -465,10 +465,10 @@
         : "=r"(c), "=r"(c1), "=r"(c2)
         : "r"(p), "0"(c), "1"(c1), "2"(c2));
     static const v2di K = { CRC32C_REFLECTED_X2047, CRC32C_REFLECTED_X1023 };
-    v2di D, E, F;
+    v2di D, E;
     asm volatile ("movq %1, %0\n\t" : "=x" (D)  : "g" (c));
     asm volatile ("movq %1, %0\n\t" : "=x" (E)  : "g" (c1));
-    //v2di F = __builtin_ia32_pclmulqdq128 (D, K, 0x00) ^ __builtin_ia32_pclmulqdq128 (E, K, 0x10);
+    v2di F = __builtin_ia32_pclmulqdq128 (D, K, 0x00) ^ __builtin_ia32_pclmulqdq128 (E, K, 0x10);
     asm volatile ("movq %1, %0\n\t" : "=g" (c1) : "x"(F));
     unsigned int r;
     asm volatile ("crc32l %1, %0\n\t" : "=r" (r) : "r"((int) c1), "0"(0));
@@ -527,7 +527,7 @@
   return crc;
 }
 
-#elif defined(__x86_64__) || defined(__i386__)
+#else
 static unsigned crc32c_partial_sse42 (const void *data, long len, unsigned crc) {
   const char *p = data;
   while ((((uintptr_t) p) & 3) && (len > 0)) {
@@ -614,7 +614,6 @@
   return gf32_combine_generic (crc32c_powers, crc1, len2) ^ crc2;
 }
 
-#if defined(__x86_64__) || defined(__i386__)
 static unsigned crc32c_combine_clmul (unsigned crc1, unsigned crc2, int64_t len2) {
   static unsigned int crc32c_powers[252] __attribute__ ((aligned(16)));
   if (len2 <= 0) {
@@ -640,11 +639,9 @@
   );
   return crc ^ ((unsigned) (T >> 32)) ^ crc2;
 }
-#endif
 
 static void crc32c_init (void) __attribute__ ((constructor));
 void crc32c_init (void) {
-#if defined(__x86_64__) || defined(__i386__)
   kdb_cpuid_t *p = kdb_cpuid ();
   compute_crc32c_combine = &crc32c_combine_generic;
   if (p->ecx & (1 << 20)) {
@@ -658,10 +655,6 @@
   } else {
     crc32c_partial = &crc32c_partial_four_tables;
   }
-#else
-  compute_crc32c_combine = &crc32c_combine_generic;
-  crc32c_partial = &crc32c_partial_four_tables;
-#endif
 }
 
 crc32_partial_func_t crc32c_partial;
